(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{572:function(t,e,r){"use strict";r.r(e);var a=r(4),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"概念前提"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概念前提"}},[t._v("#")]),t._v(" 概念前提")]),t._v(" "),r("blockquote",[r("p",[t._v("回顾下最早的Servlet方式编程中，Filter、Servlet等知识")])]),t._v(" "),r("h3",{attrs:{id:"filter-链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#filter-链"}},[t._v("#")]),t._v(" Filter & 链")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/huhuhan/img@master/md/pic/20210615161843.png",alt:""}})]),t._v(" "),r("ul",[r("li",[t._v("和Servlet类一样，由 Servlet 容器进行调用和执行的。")]),t._v(" "),r("li",[t._v("一个Servlet可以注册到多个过滤器，一组过滤器，称为"),r("strong",[t._v("过滤器链")])]),t._v(" "),r("li",[t._v("过滤器的"),r("code",[t._v("doFilter")]),t._v("方法，最终调用"),r("code",[t._v("FilterChain.doFilter")]),t._v("才表示当前这个过滤器通过。")]),t._v(" "),r("li",[t._v("过滤器调用"),r("code",[t._v("FilterChain.doFilter")]),t._v("后，按顺序执行下个过滤器，最后执行Servlet的service方法。")])]),t._v(" "),r("h3",{attrs:{id:"filterchain"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#filterchain"}},[t._v("#")]),t._v(" FilterChain")]),t._v(" "),r("ul",[r("li",[t._v("在简单Servlet编程中，"),r("code",[t._v("FilterChain.doFilter")]),t._v("的接口实现类是看不到的，因为都是Servel容器实现。")]),t._v(" "),r("li",[t._v("在SpringBoot中内置了Tomcat依赖，所以可以看到其实现类。")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/huhuhan/img@master/md/pic/20210127155454.png",alt:""}})]),t._v(" "),r("h2",{attrs:{id:"spring-mvc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc"}},[t._v("#")]),t._v(" Spring MVC")]),t._v(" "),r("p",[t._v("Spring的Servlet应用就是Spring MVC，简化了Servlet、Filter在web.xml的配置和相互注册等等。")]),t._v(" "),r("h3",{attrs:{id:"applicationfilterchain"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#applicationfilterchain"}},[t._v("#")]),t._v(" ApplicationFilterChain")]),t._v(" "),r("p",[t._v("一个Spring Boot请求的过滤器拦截，只要内置是默认的Tomcat，就是从"),r("code",[t._v("ApplicationFilterChain")]),t._v("开始解析。")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("这里引入了spring security的依赖包，就会多加载一个spring security的过滤器链 "),r("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/huhuhan/img@master/md/pic/20210127160159.png",alt:""}})])]),t._v(" "),r("li",[r("p",[t._v("这里会按顺序依次调用上面加载的过滤器链,，如下图。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/huhuhan/img@master/md/pic/20210615174554.png",alt:""}})]),t._v(" "),r("blockquote",[r("p",[t._v("*"),r("em",[t._v("注意每个都是"),r("code",[t._v("过滤器链")]),t._v("，内部又是一组过滤器调用")]),t._v("。比如后面的Security过滤器链")])])])]),t._v(" "),r("h3",{attrs:{id:"delegatingfilterproxy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#delegatingfilterproxy"}},[t._v("#")]),t._v(" DelegatingFilterProxy")]),t._v(" "),r("p",[t._v("一个Servlet可以注册多个过滤器，Spring MVC的设计是注册一个委任的过滤器代理（也是过滤器）。Spring中的所有过滤器已经注入到IOC容器，可以根据委任的Bean名，动态调用过滤器。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/huhuhan/img@master/md/pic/20210615172115.png",alt:""}})]),t._v(" "),r("h2",{attrs:{id:"spring-security-例子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-security-例子"}},[t._v("#")]),t._v(" Spring Security 例子")]),t._v(" "),r("p",[t._v("根据上面得知，加入Spring Security的依赖后，"),r("code",[t._v("ApplicationFilterChain")]),t._v("中多了一组过滤链，其对应"),r("code",[t._v("DelegatingFilterProxy")]),t._v("的delegat对象就是"),r("code",[t._v("org.springframework.security.webFilterChainProxy")])]),t._v(" "),r("h3",{attrs:{id:"filterchainproxy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#filterchainproxy"}},[t._v("#")]),t._v(" FilterChainProxy")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/huhuhan/img@master/md/pic/20210127161041.png",alt:""}})]),t._v(" "),r("p",[r("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/huhuhan/img@master/md/pic/20210127161204.png",alt:""}})]),t._v(" "),r("p",[r("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/huhuhan/img@master/md/pic/20210615180839.png",alt:""}})]),t._v(" "),r("ul",[r("li",[t._v("主要内容都在"),r("code",[t._v("doFilterInternal")]),t._v("中。其中"),r("code",[t._v("getFilters")]),t._v("将所有FilterChain的过滤器都解析出来，去重，再按顺序依次调用。")]),t._v(" "),r("li",[t._v("这里"),r("code",[t._v("this.filterChain")]),t._v("的过滤器链可以通过WebSecurity的拦截配置。参考后续介绍。")]),t._v(" "),r("li",[t._v("整理出的所有过滤器用"),r("code",[t._v("VirtualFilterChain")]),t._v("包装再调用，区分本身所属过滤链的调用冲突。")])]),t._v(" "),r("blockquote",[r("p",[t._v("这里的出现的12、11、15的重复过滤器，是因为这个项目同时加了如下配置：")]),t._v(" "),r("p",[t._v("12个是AuthorizationServerConfigurerAdapter，即\t认证服务配置")]),t._v(" "),r("p",[t._v("11个是ResourceServerConfigurerAdapter，即资源服务配置")]),t._v(" "),r("p",[t._v("15个是WebSecurityConfigurerAdapter，默认WebSecurity配置")]),t._v(" "),r("p",[t._v("ps：一般项目最多同时作为认证、资源服务。")])]),t._v(" "),r("h3",{attrs:{id:"spring-security"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-security"}},[t._v("#")]),t._v(" Spring Security")]),t._v(" "),r("ul",[r("li",[t._v("默认所有请求，会经过这套过滤器链"),r("strong",[t._v("DefaultSecurityFilterChain")]),t._v("，如图")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/huhuhan/img@master/md/pic/20210127151506.png",alt:""}})]),t._v(" "),r("ul",[r("li",[r("p",[t._v("基于"),r("strong",[t._v("WebSecurityConfigurerAdapter")]),t._v("来自定义配置权限拦截。")]),t._v(" "),r("p",[t._v("其中可以配置忽略，直接不走过滤器链")]),t._v(" "),r("div",{staticClass:"language-java line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-java"}},[r("code",[t._v(" "),r("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("configure")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSecurity")]),t._v(" web"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这配置忽略过滤器链，上面源码List<Filter> filters得到空集合")]),t._v("\n        web"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("ignoring")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("antMatchers")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/auth/test"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br")])])]),t._v(" "),r("li",[r("p",[t._v("认证鉴权是"),r("strong",[t._v("BasicAuthenticationFilter")]),t._v("，默认开启。")]),t._v(" "),r("blockquote",[r("p",[t._v("集成token认证，就需要自己写过滤器，加入过滤器链，解析验证")])])])]),t._v(" "),r("h3",{attrs:{id:"spring-security-oauth2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-security-oauth2"}},[t._v("#")]),t._v(" Spring Security Oauth2")]),t._v(" "),r("p",[t._v("引入Oauth2的依赖，默认过滤器链比Security的少4个，如图")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/huhuhan/img@master/md/pic/20210127152615.png",alt:""}})]),t._v(" "),r("ul",[r("li",[r("p",[t._v("基于"),r("strong",[t._v("ResourceServerConfigurerAdapter")]),t._v("来自定义配置权限拦截")])]),t._v(" "),r("li",[r("p",[t._v("其中鉴权是"),r("strong",[t._v("OAuth2AuthenticationProcessingFilter")]),t._v("就是"),r("strong",[t._v("token验证过滤器")]),t._v("，基于TokenStore验证，")]),t._v(" "),r("p",[t._v("可以扩展jwt等多种令牌方式")])])]),t._v(" "),r("blockquote",[r("p",[t._v("服务形式，分：授权服务器、认证服务器、资源服务器。")]),t._v(" "),r("p",[t._v("认证和授权，一般在同个服务，基于WebSecurityConfigurerAdapter（order=100）配置就行了。")]),t._v(" "),r("p",[t._v("资源服务器，即业务服务，基于ResourceServerConfigurerAdapter（order=3）配置。")]),t._v(" "),r("p",[t._v("若认证授权服务器中也当作资源服务器（比如也有业务接口，比如测试接口）基于ResourceServerConfigurerAdapter配置就行了，默认优先级高于WebSecurityConfigurerAdapter（配置了也不起效）。")])]),t._v(" "),r("h3",{attrs:{id:"spring-security-reactive"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-security-reactive"}},[t._v("#")]),t._v(" Spring Security Reactive")]),t._v(" "),r("ul",[r("li",[t._v("基于Spring WebFLux，函数式编程，不好断点调式")]),t._v(" "),r("li",[t._v("按下面的具体类名直接搜索源码查看")])]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 请求分发触发其中的handler\nHttpServerHandle.onStateChange\n\tReactorHttpHandlerAdapter.apply\n\t\tHttpWebHandlerAdapter.handle创建ServerWebExchange对象，后面的数据交互都存在这里\n\t\t\tExceptionHandlingWebHandler.handle\n\t\t\t\tFilteringWebHandler.handle\n\t\t\t\t\n// handle触发过滤器，和原本的过滤器链设计思路一样\t\t\t\t\nDefaultWebFilterChain.filter\n\tMetricsWebFilter\n\t\t...共3个filter\n\tWebFilterChainProxy\n\t\t...共9个filter\n\t\t其中AuthenticationWebFilter.filter->.authenticate\n\t\t\tJwtReactiveAuthenticationManager.authenticate\n\t\t\t\tNimbusReactiveJwtDecoder.decode\n\t\t\t\t\tJwtTimestampValidator.validate，只验证是否过期，但没有判断认证服务器tokenstore里是否已删除token，建议配置自定义ReactiveAuthenticationManager\n\t\n// 安全配置\n注解@EnableWebFluxSecurity\n基于SecurityWebFilterChain类，对应的ServerHttpSecurity\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br"),r("span",{staticClass:"line-number"},[t._v("14")]),r("br"),r("span",{staticClass:"line-number"},[t._v("15")]),r("br"),r("span",{staticClass:"line-number"},[t._v("16")]),r("br"),r("span",{staticClass:"line-number"},[t._v("17")]),r("br"),r("span",{staticClass:"line-number"},[t._v("18")]),r("br"),r("span",{staticClass:"line-number"},[t._v("19")]),r("br"),r("span",{staticClass:"line-number"},[t._v("20")]),r("br"),r("span",{staticClass:"line-number"},[t._v("21")]),r("br")])]),r("p",[r("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/huhuhan/img@master/md/pic/20210129145332.png",alt:""}})])])}),[],!1,null,null,null);e.default=s.exports}}]);